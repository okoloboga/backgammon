server {
    listen 80;
    server_name backgammon.ruble.website;

    # Перенаправление HTTP на HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name backgammon.ruble.website;

    # --- SSL-сертификаты ---
    ssl_certificate /etc/letsencrypt/live/backgammon.ruble.website/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/backgammon.ruble.website/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256';
    ssl_prefer_server_ciphers off;

    # Обслуживание статики фронтенда
    root /usr/share/nginx/html;
    index index.html;

    location / {
        try_files $uri /index.html;
    }

    # Проксирование API-запросов на бэкенд
        location /api {
            resolver 127.0.0.11 valid=30s; # Docker's built-in DNS resolver
            set $backend_host backend:3000;
            proxy_pass http://$backend_host;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 75s; # Increased timeout for backend connection
            proxy_send_timeout 75s;    # Increased timeout for sending data to backend
            proxy_read_timeout 75s;    # Increased timeout for reading data from backend
        }

    # Проксирование WebSocket для Colyseus
    location /colyseus/ {
        proxy_pass http://backend:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 86400; # Держать соединение открытым
    }

    # Обслуживание манифеста TonConnect
    location = /tonconnect-manifest.json {
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type' always;
        root /usr/share/nginx/html;
        try_files $uri =404;
    }

    # Заголовки безопасности
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-XSS-Protection "1; mode=block";
}
